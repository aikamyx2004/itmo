grammar Calculator;

@package = ru.ainur.calculator;

startRule @synt(double res)
    :   e EOF
        {startRuleContext.res = _child0.res;}
    ;
e @synt(double res)
    :   t ePrime[_in1.res=_child0.res;]
        {eContext.res = _child1.res;}
    ;

ePrime @inh(double res) @synt(double res)
    :   PLUS t ePrime [_in2.res = ePrimeInherited.res + _child1.res;]
        {ePrimeContext.res = _child2.res;}

    |   MINUS t ePrime[_in2.res = ePrimeInherited.res - _child1.res;]
        {ePrimeContext.res = _child2.res;}

    |    {ePrimeContext.res = ePrimeInherited.res;}
    ;

t @synt(double res)
    :   f tPrime [_in1.res = _child0.res;]
        {tContext.res = _child1.res;}
    ;

tPrime @inh(double res) @synt(double res)
    :   MULTIPLY f tPrime [_in2.res = tPrimeInherited.res * _child1.res;]
        {tPrimeContext.res = _child2.res;}

    |   DIVIDE f tPrime   [_in2.res = tPrimeInherited.res / _child1.res;]
        {tPrimeContext.res = _child2.res;}

    |   {tPrimeContext.res = tPrimeInherited.res;}
    ;

f   @synt(double res)
    :   LPAREN e RPAREN {fContext.res = _child1.res;}
    |   MINUS f         {fContext.res = -_child1.res;}
    |   NUMBER          {fContext.res = Integer.parseInt(_child0.getText());}
    ;

PLUS: "\\+";
MINUS: "-";
NUMBER: "\\d+";
MULTIPLY: "\\*";
DIVIDE: "/";
FUNC: "\\w+";
LPAREN: "\\(";
RPAREN: "\\)";
