{"ast":null,"code":"import Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      posts: [],\n      users: []\n    };\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n    axios.get(\"/api/1/posts\").then(response => {\n      this.posts = response.data;\n    });\n    axios.get(\"/api/1/users\").then(response => {\n      this.users = response.data;\n    });\n  },\n  beforeCreate() {\n    this.$root.$on(\"onRegister\", (name, login, password) => {\n      if (!name || name.trim() === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Name is empty\");\n        return;\n      }\n      name = name.trim();\n      if (name.length > 100) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Name length can't be more than 100\");\n        return;\n      }\n      if (!login || login.trim() === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login is empty\");\n        return;\n      }\n      login = login.trim();\n      if (login.length < 2 || login.length > 24) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login length can be from 2 to 24\");\n        return;\n      }\n      if (!login.match(\"[a-zA-z]+\")) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login can be only from Latin letters\");\n        return;\n      }\n      if (!password || password.trim() === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Password is empty\");\n        return;\n      }\n      axios.post(\"/api/1/users/register\", {\n        name,\n        login,\n        password\n      }).then(this.$root.$emit(\"onChangePage\", \"Enter\")).catch(error => this.$root.$emit(\"onRegisterValidationError\", error.response.data));\n    });\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (!login || login.trim() === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Login is empty\");\n        return;\n      }\n      login = login.trim();\n      if (login.length < 2 || login.length > 24) {\n        this.$root.$emit(\"onEnterValidationError\", \"Login length can be from 2 to 24\");\n        return;\n      }\n      if (!password || password.trim() === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is empty\");\n        return;\n      }\n      axios.post(\"/api/1/jwt\", {\n        login,\n        password\n      }).then(response => {\n        localStorage.setItem(\"jwt\", response.data);\n        this.$root.$emit(\"onJwt\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onJwt\", jwt => {\n      localStorage.setItem(\"jwt\", jwt);\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"));\n    });\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n    this.$root.$on(\"onWritePost\", (title, text, user) => {\n      if (this.user) {\n        if (!title) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Title is empty\");\n        } else if (!text) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Text is empty\");\n        } else {\n          axios.post(\"/api/1/posts/writePost\", {\n            title,\n            text,\n            user\n          }).then(this.$root.$emit(\"onChangePage\", \"WritePost\")).catch(error => this.$root.$emit(\"onWritePostValidationError\", error.response.data));\n        }\n      } else {\n        this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n      }\n    });\n  }\n};","map":{"version":3,"mappings":"AASA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;IACA;IAEAC;MACA;IACA;IACAA;MACA;IACA;EACA;EACAC;IACA;MACA;QACA;QACA;MACA;MAEAX;MACA;QACA;QACA;MACA;MAEA;QACA;QACA;MACA;MACAY;MACA;QACA;QACA;MACA;MACA;QACA;QACA;MACA;MAEA;QACA;QACA;MACA;MACAF;QAAAV;QAAAY;QAAAC;MAAA,GACAC,gDACAC;IACA;IACA;MACA;QACA;QACA;MACA;MACAH;MACA;QACA;QACA;MACA;MAEA;QACA;QACA;MACA;MAEAF;QACAE;QAAAC;MACA;QACAG;QACA;MACA;QACA;MACA;IACA;IAEA;MACAA;MAEAN;QACAO;UACAC;QACA;MACA;QACA;QACA;MACA;IACA;IAEA;MACAF;MACA;IACA;IACA;MACA;QACA;UACA;QACA;UACA;QACA;UACAN;YAAAS;YAAAC;YAAAd;UAAA,GACAQ,oDACAC;QAEA;MACA;QACA;MACA;IACA;EACA;AACA","names":["name","components","Footer","Middle","Header","data","user","posts","users","beforeMount","axios","beforeCreate","login","password","then","catch","localStorage","params","jwt","title","text"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <Header :user=\"user\"/>\n    <Middle :posts=\"posts\" :users=\"users\"/>\n    <Footer/>\n  </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\"\n\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      posts: [],\n      users: []\n    }\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n\n    axios.get(\"/api/1/posts\").then(response => {\n      this.posts = response.data;\n    });\n    axios.get(\"/api/1/users\").then(response => {\n      this.users = response.data;\n    });\n  },\n  beforeCreate() {\n    this.$root.$on(\"onRegister\", (name, login, password) => {\n      if (!name || name.trim() === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Name is empty\");\n        return;\n      }\n\n      name = name.trim();\n      if (name.length > 100) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Name length can't be more than 100\");\n        return;\n      }\n\n      if (!login || login.trim() === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login is empty\");\n        return;\n      }\n      login = login.trim();\n      if (login.length < 2 || login.length > 24) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login length can be from 2 to 24\");\n        return;\n      }\n      if (!login.match(\"[a-zA-z]+\")) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login can be only from Latin letters\");\n        return;\n      }\n\n      if (!password || password.trim() === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Password is empty\");\n        return;\n      }\n      axios.post(\"/api/1/users/register\", {name, login, password})\n          .then(this.$root.$emit(\"onChangePage\", \"Enter\"))\n          .catch(error => this.$root.$emit(\"onRegisterValidationError\", error.response.data))\n    });\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (!login || login.trim() === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Login is empty\");\n        return;\n      }\n      login = login.trim();\n      if (login.length < 2 || login.length > 24) {\n        this.$root.$emit(\"onEnterValidationError\", \"Login length can be from 2 to 24\");\n        return;\n      }\n\n      if (!password || password.trim() === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is empty\");\n        return;\n      }\n\n      axios.post(\"/api/1/jwt\", {\n        login, password\n      }).then(response => {\n        localStorage.setItem(\"jwt\", response.data);\n        this.$root.$emit(\"onJwt\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n\n    this.$root.$on(\"onJwt\", (jwt) => {\n      localStorage.setItem(\"jwt\", jwt);\n\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"))\n    });\n\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n    this.$root.$on(\"onWritePost\", (title, text, user) => {\n      if (this.user) {\n        if (!title) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Title is empty\");\n        } else if (!text) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Text is empty\");\n        } else {\n          axios.post(\"/api/1/posts/writePost\", {title, text, user})\n              .then(this.$root.$emit(\"onChangePage\", \"WritePost\"))\n              .catch(error => this.$root.$emit(\"onWritePostValidationError\", error.response.data))\n\n        }\n      } else {\n        this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n      }\n    });\n  }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}